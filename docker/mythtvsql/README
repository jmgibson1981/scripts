README

This Docker configuration allows you to theoretically run as many mythtv-backend
instances on a single host as the machine can handle. This is done with
environment files that are available to both the host and the container.

The only thing you should need to edit / create is the environment files.
Create a docker volume to hold these files. In my case with the snapd docker
/var/snap/docker/common/var-lib-docker/volumes/mythtvenv/_data/ is the final 
path. For convenience I symlinked this location to /root/MYTHTVENV. In this 
folder you create simple text files, nothing more than bash / sh variables. 
There are only 4 needed.

Example file. I added the shebang simply for highlighting in my editor. Does not
need to be executable, is only a source file.

(Note - MasterServerPort is not defined. It is being deprecated. The script
assigns it the same value as the BackendServerPort)

#!/bin/sh
SSHPORT=22222
SQLPORT=33066
BackendServerPort=50000
BackendStatusPort=50001

In this case the file is named "mythtv" followed by designation. For my wife and
I, Jason & Yansell the file is "mythtvjyg". Once this file exists in your shared
ENV folder you can run your service file. This will pull the proper environment 
variables as well as create a dedicated volume for this container's mythtv / sql
data.

systemctl start docker.mythtv@jyg.service

The script will do the initial base configuration required for the the internal 
SQL server (mariadb in this case) followed by starting the services. 
After the initial run this script just starts the services. This is accomplished
by a lock file created in the container specific mythtv data volume.

At this point you configure as normal. Standard ssh access using the port
specified.

ssh -X -p 22222 mythtv@localhost (or your remote server?)
Password is mythtv

When you do the setup you will notice that the ports are still default in the
gui. The edits done by the script force it to use your non standard ports.

(Refer to To Do #3)

Once this is done point your client to the ip address and enter the appropriate
ports.

The container has a simple feature built in. Cron is installed and activated to
run the basic optimize_mythdb.pl script weekly (by my timezone 2 am on Sunday).
In addition a user is created in the initial process to allow backups of the sql
database. This user is sql user 'backup' password 'backup'

I do have some work yet to do. I cannot say with 100% certainty this will work
the way I intended and the only reason is I only have a single network tuner at 
the moment. The goal was to have a tuner ip dedicated to each container. I will 
be fully testing this as soon as I can. 2 containers will not successfully pull
from the same network tuner, regardless of which input you try to force. For
reference I'm currently using an older model tuner HDHomeRun on the network.

TO DO:
1. Need to tighten permissions on sql backup user.

2. Need to test with multiple tuners. If someone can do this and report back
   I'd love the confirmation... or bad news.
   
3. Need to find why the mythtv user even with sudo cannot start the backend from
   the provided gui buttons after finishing setup. Workaround is to manually
   start the mythtv service like so
   
   docker exec -it mythtvjyg service mythtv-backend start
