#!/bin/sh
# tadaen sylvermane | jason gibson

# snapraid sync & scrub with lvm #

# the goal of this script is to be able to sync a snapraid array without being 
# interrupted by a potential write. this leverages lvm snapshots to create
# the parity from rather than directly from the disks. the snapshots are
# eliminated after the sync is done.

# packages required (based on debian / ubuntu)

# lvm2
# snapraid
# msmtp

# variables #

NOW=$(date +%Y.%m.%d.%H.%M)

# snapraid directories #

LOGFILELOC=/var/snapraid/logs
SNAPRAIDCONFIG=/etc/snapraid.conf
BASEFOLDER=/snapraid
DATAFOLDER="$BASEFOLDER"/data
LVSNAPS="$BASEFOLDER"/lvsnapshots
# this is just here for reference
PARITYFOLDER="$BASEFOLDER"/parity


# functions #

emergency_email_func() {
	EMAILLOC=/tmp/"$(uname -n)"."$2"."$NOW".alert
	echo "To: ${1}
From: $(grep from "$HOME"/.msmtprc | cut -d' ' -f 2)
Subject: $(uname -n) alert!

" > "$EMAILLOC"
	echo "snapraid scrub finished with errors. check manually" >> "$EMAILLOC"
	msmtp "$1" < "$EMAILLOC"
	rm "$EMAILLOC"
}

# this function toggles the /etc/snapraid.conf file data locations so that the
# sync only runs from the lv snapshots. after finishing it switches them back
# to the regular in use volumes. the folder names are based on using mergerfs
# for the pooling. in my case all drives are mounted under 
# /snapraid/data/data"$n" where "$n" = the number of the disk = to d1, d2 and
# so forth
# my test vm had drives mounted @ /snapraid/data/data1, /snapraid/data/data2

snap_conf_line_edit() {
	sed -i '/^data/d' "$SNAPRAIDCONFIG"
	case "$1" in
		data)
			CURRENTLOC="$DATAFOLDER"
			;;
		snaps)
			CURRENTLOC="$LVSNAPS"
			;;
	esac
	find "$DATAFOLDER"/ -maxdepth 1 -mindepth 1 | sort -n | while read line ; do
		LINENUM=$(echo "$line" | cut -d \/ -f 4)
		echo "data d$(echo ${LINENUM} | tail -c 2) ${CURRENTLOC}/${LINENUM}" >> \
		"$SNAPRAIDCONFIG"
	done
	sed -i '/^$/d' "$SNAPRAIDCONFIG"
}

# this function creates and mounts the snapshots as needed for sync

lv_snap_create_mount() {
	snap_conf_line_edit snaps
	for dir in "$DATAFOLDER"/* ; do
		MOUNTDIR=$(basename "$dir")
		if ! mountpoint "$LVSNAPS"/"$MOUNTDIR" > /dev/null ; then
			lvcreate -y -s -n "$MOUNTDIR".snap -L 500m "$MOUNTDIR"/"$MOUNTDIR"
			[ -d "$LVSNAPS"/"$MOUNTDIR" ] || mkdir -p "$LVSNAPS"/"$MOUNTDIR"
			mount /dev/"$MOUNTDIR"/"$MOUNTDIR".snap "$LVSNAPS"/"$MOUNTDIR"
		fi
	done
}

# this function unmounts and destroys the snapshots immediately following sync

lv_snap_destroy_unmount() {
	snap_conf_line_edit data
	for dir in "$LVSNAPS"/* ; do
		MOUNTDIR=$(basename "$dir")
		if mountpoint "$dir" > /dev/null ; then
			umount "$dir"
			lvremove -y /dev/"$MOUNTDIR"/"$MOUNTDIR".snap
		fi
	done
}

# this handles scrubbing and sends an email if there are errors. this needs
# more testing. as i just wrote this using debian inside of virtualbox my
# parity isn't old enough to scrub. i may incorporate some of the script found
# here - https://zackreed.me/updated-snapraid-sync-script/ if mine doesn't work
# aiming for super simple. less involved the better.

snapraid_scrub_func() {
	[ -d "$LOGFILELOC" ] || mkdir -p "$LOGFILELOC"
	snapraid scrub -l "$LOGFILELOC"/snapscrub."$NOW".log
	if ! grep "msg:status Ok" "$LOGFILELOC"/snapscrub."$NOW".log ; then
		emergency_email_func "$1" snapraid
		cp "$LOGFILELOC"/snapscrub."$NOW".log /root
	fi
	find "$LOGFILELOC"/ -type f -mtime +60 -exec rm {} \;
}

# begin script #

if [ "$USER" = root ] ; then
	case "$1" in
		sync)
			lv_snap_create_mount
			snapraid sync
			lv_snap_destroy_unmount
			;;
		scrub)
			snapraid_scrub_func "$1"
			;;
		*)
			echo "usage: ${0} (sync | scrub {email alert target})"
			exit 0
			;;
	esac
else
	echo "must run as root"
	exit 1
fi

# end script #
