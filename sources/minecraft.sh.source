#!/bin/sh
# tadaen sylvermane
# minecraft functions desktop & server

# begin source #

# variables #

# one variable is defined in both the mc_backup_exec_func & mc_ssd_launch

# server ramdisk functions #

# originally sourced from init.d script found at
# https://minecraft.gamepedia.com/Tutorials/Server_startup_script

# local variables #

RAMDIR=/ramdisk
WORLDS=/home/"$USER"/gameworlds
RSYNCOPTS=-au

# this is a function due to it being called in 2 potential ways depending on
# whether or not being used with a ramdisk

mc_start_cmd() {
	screen -dmS "$1" java -jar /home/"$USER"/server.jar nogui
}

# replaces both mcstart@.service & mcramdisk@.service. loads ramdisk if required
# and starts. which way depends on existing lockfile.

mc_server_start() {
	for world in "$@" ; do
		if [ -f "$WORLDS"/"$world"/.ramdisk ] ; then
			rsync -au "$WORLDS"/"$world" "$RAMDIR"
			cd "$RAMDIR"/"$world" && mc_start_cmd "$world"
		else
			cd "$WORLDS"/"$world" && mc_start_cmd "$world"
		fi
	done
}

mc_screen_cmd_func() {
	screen -p 0 -S "$1" -X eval "stuff \"${2}\"\015"
}

mc_log_cleanup_func() {
	find "$1"/"$2"/logs/ -name '*.log.gz' -exec rm {} \;
}

mc_backup_exec_func() {
	MCBACKDIR=/snapraid/pool/backups/minecraft
	[ "$1" = stop ] && WORLDSTATUS="$1"
	shift
	for world in "$@" ; do
		if [ -e "$RAMDIR"/"$world"/.ramdisk ] ; then
			mc_log_cleanup_func "$RAMDIR" "$world"
		else
			mc_log_cleanup_func "$WORLDS" "$world"
		fi
		mc_screen_cmd_func "$world" "save-off"
		mc_screen_cmd_func "$world" "save-all"
		sync
		sleep 10
		[ -e "$RAMDIR"/"$world"/.ramdisk ] && rsync "$RSYNCOPTS" \
		"$RAMDIR"/"$world" "$WORLDS"/
		case $(date +%H%M) in
			0300|1500)
				tar -czf /"$MCBACKDIR"/"$world"."$NOW".tar.gz "$RAMDIR"/"$world"/*
			;;
		esac
		if [ "$WORLDSTATUS" = stop ] ; then
			mc_screen_cmd_func "$world" "say world saved"
			sleep 5
			for seconds in 15 10 5 ; do
				mc_screen_cmd_func "$world" "say stopping in ${seconds}"
				sleep 5
			done
			mc_screen_cmd_func "$world" "stop"
			[ -e "$RAMDIR"/"$world"/.ramdisk ] && rm -r "$RAMDIR"/"$world"
		else
			mc_screen_cmd_func "$world" "save-on"
		fi
		find "$MCBACKDIR"/ -type f -mtime +3 -exec rm {} \;
	done
}

mc_systemd_global_stop() {
	for world in $(screen -ls | grep Detached | awk '{print $1}' \
	| cut -d . -f 2) ; do
		mc_backup_exec_func stop "$world"
	done
}

# desktop launch with remote sync #

mc_start_stop() {
	gtk-launch minecraft-launcher
	until ! ps -u "$USER" | grep minecraft-l ; do
		sleep 10
	done
}

mc_oops() {
	[ -d "$1"/saves."$NOW" ] || mkdir -p "$1"/saves."$NOW"
	rsync -au /home/"$USER"/.minecraft/saves/* "$1"/saves."$NOW"
	find "$1"/ -maxdepth 1 -type d -mtime +2 -exec rm -r {} \;
	[ -L /home/"$USER"/MC-OOPS ] || ln -s "$1" /home/"$USER"/MC-OOPS
	
}

mc_ssd_launch() {
	MCBACKDIR="$POOLLOC"/backups/minecraft/"$USER"
	MCRESTOREDIR="$MCBACKDIR"/oops
	if [ $(uname -n) = homewrecker ] ; then
		if ! ps -u "$USER" | grep minecraft-l ; then
			rsync -au --delete "$MCBACKDIR"/.minecraft /home/"$USER"/
			mc_start_stop
			rsync -au --delete /home/"$USER"/.minecraft "$MCBACKDIR"/
			mc_oops "$MCRESTOREDIR"
		fi
	else
		mc__start_stop
		mc_oops "$MCRESTOREDIR"
	fi
}

# end source #
